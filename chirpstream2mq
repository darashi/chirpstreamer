#!/usr/bin/env ruby

require_relative 'boot'
require 'logger'

class TwitterUserStreamClient < EM::Protocols::LineAndTextProtocol
  attr_reader :logger

  def initialize(path, login, password, logger, block)
    super()
    @path = path
    @login, @password = login, password
    @logger = logger
    @block = block
  end

  def connection_completed
    logger.info "[%s] connection completed" % @login
    @state = :header
    @headers = []
    auth = [[@login, @password].join(':')].pack("m").chomp
    send_data(
      ["GET #{@path} HTTP/1.0", "Authorization: Basic %s" % auth].join("\r\n") +
      "\r\n\r\n"
    )
  end

  def receive_line line
    case @state
    when :header
      if line == ""
        logger.info "[%s] %s" % [@login, @headers.first]
        http_version, code, message = @headers.first.split(/\s+/, 3)
        if code != "200"
          logger.error "server returns #{@headers.first}"
          raise "server returns #{@headers.first}"
        end
        @state = :body
      else
        @headers << line.chomp
      end
    when :body
      @block.call(line) unless line.empty?
    end
  end

  def unbind
    super
    logger.info "[%s] disconnected" % @login
  end
end

def connect_user_stream(login, password, logger, uri=nil, &block)
  uri ||= URI("http://chirpstream.twitter.com/2b/user.json")
  EM.connect(uri.host, uri.port, TwitterUserStreamClient, uri.path, login, password, logger, block)
end

logger = Logger.new(STDERR)

AMQP.start(configatron.mq.to_hash) do
  topic = MQ.topic('userstream')
  configatron.accounts.to_a.each do |login, password|
    connect_user_stream(login, password, logger) do |line|
      topic.publish line, :key => login
    end
  end
end
